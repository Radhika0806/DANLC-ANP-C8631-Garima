import numpy as np
import pandas as pd
# Lab1: Write a Pandas program to create a dataframe from a dictionary and display it.
# Sample data:
score={'Math':[78,85,96,80,86], 'English':[84,94,89,83,86],'Hindi':[86,97,96,72,83]}
print("__________Answer1__________")
df1 = pd.DataFrame(score)
print(df1)


# Lab2: Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
print("\n__________Answer2__________")
df2 = pd.DataFrame(exam_data)
print(df2)


# Lab3: Write a Pandas program to get the first 3 rows of a given DataFrame.
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
print("\n__________Answer3__________")
print("First three rows of the dataframe")
df3 = pd.DataFrame(exam_data)
print(df3[:3])


# Lab4: Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.
exam_data2 = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
print("\n__________Answer4__________")
df4 = pd.DataFrame(exam_data2)
print("Original data:   ")
print(df4)
print("Specific name and score columns:")
print(df4[["name", "score"]])


print("\n_____________ChatGPT Exercise_____________")
# Using ChatGPT generate the python code to solve the same problem
# Scenario: Analyzing Sales Data
# Suppose you work for a retail company, and you have a dummy dataset containing sales data for the past year. The data includes information such as customer
# names, product names, sales quantities, prices, and dates. You want to perform various data analysis tasks like Total revenue for the year,Average revenue
# per sale,Best-selling product,Date with the highest total revenue also wants to generate product and total sales wise barchart using Pandas DataFrames.
# Further, you need to get some inference out of the chart.
# Create a ChatGPT prompt to generate the code for this scenario. Based on the code generated, ask ChatGPT to give the conclusion/inference.

print("Prompt to be given to ChatGPT: \nI work for a retail company, and I have a dummy dataset containing sales data for the past year. The data includes columns for customer names, "
"product names, sales quantities, prices, and dates. I want to perform the following data analysis tasks:"
"Calculate the total revenue for the year."
"Determine the average revenue per sale."
"Identify the best-selling product."
"Find the date with the highest total revenue."
"Generate bar charts for product-wise sales and total revenue by product."
"Please provide the code to perform these tasks using Pandas DataFrames and also draw inferences from the charts generated.")

# Code generated by GhatGPT
import pandas as pd
import matplotlib.pyplot as plt

# Creating a dummy DataFrame with sales data
data = {
    'Customer_Name': ['Alice', 'Bob', 'Charlie', 'David', 'Alice', 'Bob'],
    'Product_Name': ['Product_A', 'Product_B', 'Product_A', 'Product_C', 'Product_B', 'Product_A'],
    'Quantity_Sold': [2, 1, 3, 2, 2, 1],
    'Price': [100, 200, 100, 150, 200, 100],
    'Date': ['2023-01-10', '2023-02-15', '2023-01-10', '2023-03-20', '2023-02-15', '2023-01-10']
}

df = pd.DataFrame(data)

# Calculate total revenue for each sale
df['Revenue'] = df['Quantity_Sold'] * df['Price']

# Total revenue for the year
total_revenue = df['Revenue'].sum()

# Average revenue per sale
average_revenue_per_sale = df['Revenue'].mean()

# Best-selling product
best_selling_product = df.groupby('Product_Name')['Quantity_Sold'].sum().idxmax()

# Date with the highest total revenue
highest_revenue_date = df.groupby('Date')['Revenue'].sum().idxmax()

# Generate bar chart for product-wise total sales
product_sales = df.groupby('Product_Name')['Quantity_Sold'].sum()
product_sales.plot(kind='bar', color='skyblue', title='Total Sales by Product')
plt.ylabel('Quantity Sold')
plt.show()

# Generate bar chart for product-wise total revenue
product_revenue = df.groupby('Product_Name')['Revenue'].sum()
product_revenue.plot(kind='bar', color='salmon', title='Total Revenue by Product')
plt.ylabel('Revenue')
plt.show()

# Display the calculated values
(total_revenue, average_revenue_per_sale, best_selling_product, highest_revenue_date)


print("Conclusion by ChatGPT:")

print("- Product_A leads in both sales and revenue, making it the most successful product.")
print("- Product_B and Product_C have potential for growth, especially with targeted marketing.")
print("- 2023-02-15 was the most profitable date, possibly due to a sales event or promotion.")

